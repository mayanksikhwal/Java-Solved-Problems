//Program to check and find whether an array is having equilibrium index or not

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Prompt the user to enter the size of the array
        System.out.print("Enter the size of the array: ");
        int n = sc.nextInt();

        // Initialize the array with the given size
        int[] A = new int[n];
        
        // Prompt the user to enter each element of the array
        System.out.println("Enter the elements of the array: ");
        for (int i = 0; i < n; i++) {
            A[i] = sc.nextInt();  // Reading each element
        }

        // Create an instance of Main to call the solve method
        Main solution = new Main();
        
        // Get the result from the solve method
        int result = solution.solve(A);
        
        // Display the result based on whether an equilibrium index was found
        if (result == -1) {
            System.out.println("No equilibrium index found.");
        } else {
            System.out.println("Equilibrium index: " + result);
        }
    }

    public int solve(int[] A) {
        // Initialize sum1 to hold the total sum of all elements in the array
        long sum1 = 0;  
        for (int i = 0; i < A.length; i++) {
            sum1 += A[i];  // Accumulate the total sum
        }

        // Initialize sum2 to track the sum of elements on the left side
        long sum2 = 0;  
        
        // Start with a high value for ans, to check if an equilibrium index is found
        int ans = Integer.MAX_VALUE;
        
        // Loop through each element in the array to check for equilibrium
        for (int i = 0; i < A.length; i++) {
            // Subtract the current element from total sum (sum1) to get the right side sum
            sum1 -= A[i];

            // Check if the left sum (sum2) equals the right sum (sum1)
            if (sum1 == sum2) {
                ans = i;  // If true, set the current index as the equilibrium index
                break;    // Exit loop as we've found the minimum equilibrium index
            }

            // Update sum2 by adding the current element, moving to the next element
            sum2 += A[i];
        }

        // If no equilibrium index was found, set ans to -1
        if (ans == Integer.MAX_VALUE) {
            ans = -1;
        }

        // Return the equilibrium index, or -1 if none was found
        return ans;
    }
}
